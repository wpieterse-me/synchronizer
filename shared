SERVER_PC_CONTENT_PATH="/shared/content"
SERVER_PC_DEVELOPMENT_PATH="/shared/development"
SERVER_PC_BUILDS_PATH="/shared/builds"

WYNAND_PC_REPOSITORIES_PATH="/home/wpieterse/repositories"
WYNAND_PC_BUILDS_PATH="/home/wpieterse/builds"

PARAMETER_DISABLE_CLEAR=0
PARAMETER_DISABLE_PRUNE=0

function PrintBanner {
    echo ""
    echo "************************************************************************************************************************"
    echo "* $1"
    echo "************************************************************************************************************************"
    echo ""
}

function ProcessGitRepositories {
    local REMOTE_BASE_PATH=""
    local LOCAL_BASE_PATH=""
    local REPOSITORIES=()
    local BRANCHES=()

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --remote-base-path=*|--local-base-path=*|--repository=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --remote-base-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessGitRepositories: No argument after --remote-base-path"
                    exit 1
                fi

                shift
                REMOTE_BASE_PATH="$1"
                ;;
            --local-base-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessGitRepositories: No argument after --local-base-path"
                    exit 1
                fi

                shift
                LOCAL_BASE_PATH="$1"
                ;;
            --repository)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessGitRepositories: No argument after --repository"
                    exit 1
                fi

                shift
                REPOSITORIES+=("$1")
                ;;
            --branch)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessGitRepositories: No argument after --branch"
                    exit 1
                fi

                shift
                BRANCHES+=("$1")
                ;;
            *)
                echo "ProcessGitRepositories: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    for INDEX in "${!REPOSITORIES[@]}";
    do
        CURRENT_REPOSITORY="${REPOSITORIES[${INDEX}]}"
        CURRENT_BRANCH="${BRANCHES[${INDEX}]}"

        PrintBanner "${REMOTE_BASE_PATH}/${CURRENT_REPOSITORY}"

        mkdir -p "${LOCAL_BASE_PATH}"

        docker \
            run \
                -it \
                --rm \
                --volume "$(readlink -f ${SSH_AUTH_SOCK})":/ssh-agent \
                --env SSH_AUTH_SOCK=/ssh-agent \
                --mount "type=bind,src=${LOCAL_BASE_PATH},dst=/work" \
                development-git \
                    --remote "${REMOTE_BASE_PATH}" \
                    --name "${CURRENT_REPOSITORY}" \
                    --branch "${CURRENT_BRANCH}"
    done
}

function ProcessCommonArguments {
    while [[ $# -ne 0 ]];
    do
        case $1 in
            --disable-clear)
                PARAMETER_DISABLE_CLEAR=1
                ;;
            --disable-prune)
                PARAMETER_DISABLE_PRUNE=1
                ;;
            *)
                echo "Process: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done
}

function ProcessCommonPre {
    if [[ ${PARAMETER_DISABLE_CLEAR} -eq 0 ]];
    then
        clear
    fi
}

function ProcessCommonPost {
    if [[ ${PARAMETER_DISABLE_PRUNE} -eq 0 ]];
    then
        docker \
            system \
                prune \
                    --force \
                    --volumes
    fi
}

function ProcessSubScripts {
    local SUB_SCRIPT_ROOT=""
    local SUB_SCRIPTS=()
    local SUB_SCRIPT_ARGUMENTS=()

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --root=*|--script=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --root)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessSubScripts: No argument after --root"
                    exit 1
                fi

                shift
                SUB_SCRIPT_ROOT="$1"
                ;;
            --script)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessSubScripts: No argument after --script"
                    exit 1
                fi

                shift
                SUB_SCRIPTS+=("$1")
                ;;
            *)
                echo "ProcessSubScripts: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    SUB_SCRIPT_ARGUMENTS+=("--disable-clear")
    SUB_SCRIPT_ARGUMENTS+=("--disable-prune")

    for CURRENT_SUB_SCRIPT in "${SUB_SCRIPTS[@]}";
    do
        SUB_SCRIPT_RESOLVED_PATH="${SUB_SCRIPT_ROOT}/${CURRENT_SUB_SCRIPT}"

        chmod +x "${SUB_SCRIPT_RESOLVED_PATH}"

        "${SUB_SCRIPT_RESOLVED_PATH}" ${SUB_SCRIPT_ARGUMENTS[@]}
    done
}
