SERVER_PC_SHARED_CONTENT_PATH="/shared/content"
SERVER_PC_SHARED_DEVELOPMENT_PATH="/shared/development"
SERVER_PC_SHARED_RANDOMS_PATH="/shared/randoms"
SERVER_PC_SHARED_BUILDS_PERSONAL_PATH="/shared/builds_personal"
SERVER_PC_SHARED_BUILDS_OTHER_PATH="/shared/builds_other"

WYNAND_PC_HOME_REPOSITORIES_PATH="/home/wpieterse/repositories"
WYNAND_PC_HOME_BUILDS_PATH="/home/wpieterse/builds"

SYNCHRONIZER_REPOSITORY_PATH="${SERVER_PC_SHARED_RANDOMS_PATH}/synchronizer"

PARAMETER_DISABLE_CLEAR=0
PARAMETER_DISABLE_PRUNE=0
PARAMETER_DISABLE_CONTENT=0
PARAMETER_DISABLE_SERVICES=0
PARAMETER_DISABLE_DELUGE=0
PARAMETER_DISABLE_PLEX=0
PARAMETER_DISABLE_DEVELOPMENT=0
PARAMETER_DISABLE_REPOSITORIES=0
PARAMETER_DISABLE_CLONE=0
PARAMETER_DISABLE_BUILD=0
PARAMETER_DISABLE_RANDOMS=0

TOOL_GNU_C_COMPILER="gcc-10"
TOOL_GNU_CPP_COMPILER="g++-10"
TOOL_GNU_LINKER="ld"

TOOL_LLVM_C_COMPILER="clang-13"
TOOL_LLVM_CPP_COMPILER="clang++-13"
TOOL_LLVM_LINKER="ld.lld-13"

TOOL_INTEL_C_COMPILER="clang-13"
TOOL_INTEL_CPP_COMPILER="dpcpp"
TOOL_INTEL_LINKER="ld.lld-13"

TOOL_NONE_C_COMPILER="gcc"
TOOL_NONE_CPP_COMPILER="g++"
TOOL_NONE_LINKER="ld"

declare -a DEFAULT_SUPPORTED_COMPILERS=(
    "gnu"
    "llvm"
)

declare -a DEFAULT_SUPPORTED_BAZEL_BUILD_TYPES=(
    "dbg"
    "fastbuild"
    "opt"
)

declare -a DEFAULT_SUPPORTED_CMAKE_BUILD_TYPES=(
    "debug"
    "relwithdebinfo"
    "release"
    "minsizerel"
)

function ProcessGitRepository {
    local REPOSITORY_REMOTE_BASE_PATH=""
    local REPOSITORY_LOCAL_BASE_PATH=""
    local REPOSITORY_NAME=""
    local REPOSITORY_BRANCH=""

    if [[ ${PARAMETER_DISABLE_CLONE} -eq 0 ]];
    then
        while [[ $# -ne 0 ]];
        do
            case $1 in
                --remote-base-path=*|--local-base-path=*|--name=*|--branch=*)
                    arg="$1"
                    shift
                    set -- "${arg%%=*}" "${arg#*=}" "$@"
                    continue
                    ;;
                --remote-base-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessGitRepository: No argument after --remote-base-path"
                        exit 1
                    fi

                    shift
                    REPOSITORY_REMOTE_BASE_PATH="$1"
                    ;;
                --local-base-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessGitRepository: No argument after --local-base-path"
                        exit 1
                    fi

                    shift
                    REPOSITORY_LOCAL_BASE_PATH="$1"
                    ;;
                --name)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessGitRepository: No argument after --name"
                        exit 1
                    fi

                    shift
                    REPOSITORY_NAME="$1"
                    ;;
                --branch)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessGitRepository: No argument after --branch"
                        exit 1
                    fi

                    shift
                    REPOSITORY_BRANCH="$1"
                    ;;
                *)
                    echo "ProcessGitRepository: Unknown argument $1."
                    exit 1
                    ;;
            esac

            shift
        done

        mkdir -p ${REPOSITORY_LOCAL_BASE_PATH}

        pushd ${REPOSITORY_LOCAL_BASE_PATH} > /dev/null

        if [ ! -d "${REPOSITORY_NAME}" ];
        then
            echo "*** INITIAL CLONE ******************************************************************************************************"
            echo ""

            git                                                         \
                clone                                                   \
                "${REPOSITORY_REMOTE_BASE_PATH}/${REPOSITORY_NAME}.git" \
                --recurse-submodules

            echo ""
        fi

        pushd "${REPOSITORY_LOCAL_BASE_PATH}/${REPOSITORY_NAME}"  > /dev/null

        git                 \
            config          \
            pager.log false

        echo "*** CLEAN **************************************************************************************************************"
        echo ""
        echo "Cleaning"

        git         \
            clean   \
            -dxf

        echo ""
        echo "*** RESET **************************************************************************************************************"
        echo ""

        git                             \
            reset                       \
            --hard ${REPOSITORY_BRANCH}

        echo ""
        echo "*** CHECKOUT ***********************************************************************************************************"
        echo ""

        git                         \
            checkout                \
            ${REPOSITORY_BRANCH}

        echo ""
        echo "*** PULL ***************************************************************************************************************"
        echo ""

        git                         \
            pull                    \
            --recurse-submodules    \
            --all

        echo ""
        echo "*** LOG ****************************************************************************************************************"
        echo ""

        git     \
            log \
            -n1

        echo ""

        popd > /dev/null

        popd > /dev/null
    fi
}

function ProcessBazelTest {
    local SOURCE_PATH=""
    local BUILD_PATH=""
    local COMPILER=""
    local BUILD_TYPE=""

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --source-path=*|--build-path=*|--compiler=*|--build-type=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --source-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessBazelTest: No argument after --source-path"
                    exit 1
                fi

                shift
                SOURCE_PATH="$1"
                ;;
            --build-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessBazelTest: No argument after --build-path"
                    exit 1
                fi

                shift
                BUILD_PATH="$1"
                ;;
            --compiler)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessBazelTest: No argument after --compiler"
                    exit 1
                fi

                shift
                COMPILER="$1"
                ;;
            --build-type)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessBazelTest: No argument after --build-type"
                    exit 1
                fi

                shift
                BUILD_TYPE="$1"
                ;;
            *)
                echo "ProcessBazelTest: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    if [ "${COMPILER}" = "gnu" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_GNU_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_GNU_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_GNU_LINKER}

        if [ "${BUILD_TYPE}" = "dbg" ];
        then
            echo "*** TEST - GNU - DEBUG *************************************************************************************************"
        elif [ "${BUILD_TYPE}" = "fastbuild" ];
        then
            echo "*** TEST - GNU - FAST BUILD ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "opt" ];
        then
            echo "*** TEST - GNU - OPTIMIZED *********************************************************************************************"
        else
            echo "*** TEST - GNU - UNKNOWN ***********************************************************************************************"
        fi
    elif [ "${COMPILER}" = "llvm" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_LLVM_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_LLVM_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_LLVM_LINKER}

        if [ "${BUILD_TYPE}" = "dbg" ];
        then
            echo "*** TEST - LLVM - DEBUG ************************************************************************************************"
        elif [ "${BUILD_TYPE}" = "fastbuild" ];
        then
            echo "*** TEST - LLVM - FAST BUILD *******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "opt" ];
        then
            echo "*** TEST - LLVM - OPTIMIZED ********************************************************************************************"
        else
            echo "*** TEST - LLVM - UNKNOWN **********************************************************************************************"
        fi
    elif [ "${COMPILER}" = "intel" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_INTEL_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_INTEL_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_INTEL_LINKER}

        if [ "${BUILD_TYPE}" = "dbg" ];
        then
            echo "*** TEST - INTEL - DEBUG ***********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "fastbuild" ];
        then
            echo "*** TEST - INTEL - FAST BUILD ******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "opt" ];
        then
            echo "*** TEST - INTEL - OPTIMIZED *******************************************************************************************"
        else
            echo "*** TEST - INTEL - UNKNOWN *********************************************************************************************"
        fi
    else
        _CONTAINER_C_COMPILER=${TOOL_NONE_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_NONE_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_NONE_LINKER}

        if [ "${BUILD_TYPE}" = "dbg" ];
        then
            echo "*** TEST - UNKNOWN - DEBUG *********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "fastbuild" ];
        then
            echo "*** TEST - UNKNOWN - FAST BUILD ****************************************************************************************"
        elif [ "${BUILD_TYPE}" = "opt" ];
        then
            echo "*** TEST - UNKNOWN - OPTIMIZED *****************************************************************************************"
        else
            echo "*** TEST - UNKNOWN - UNKNOWN *******************************************************************************************"
        fi
    fi

    echo ""

    local _BUILD_PATH_FINAL="${BUILD_PATH}/${COMPILER}"

    mkdir -p ${_BUILD_PATH_FINAL}

    pushd ${SOURCE_PATH} > /dev/null

    source /opt/intel/oneapi/setvars.sh > /dev/null

    bazel                                               \
        --output_base=${_BUILD_PATH_FINAL}              \
        test                                            \
            --symlink_prefix=/                          \
            --compilation_mode=${BUILD_TYPE}            \
            --repo_env=CC=${_CONTAINER_C_COMPILER}      \
            --repo_env=CXX=${_CONTAINER_CPP_COMPILER}   \
            --repo_env=LD=${_CONTAINER_LINKER}          \
            //...

    popd > /dev/null

    echo ""
}

function ProcessBazel {
    local SOURCE_PATH=$3
    local BUILD_PATH=$4

    if [[ ${PARAMETER_DISABLE_BUILD} -eq 0 ]];
    then
        while [[ $# -ne 0 ]];
        do
            case $1 in
                --source-path=*|--build-path=*|--compiler=*|--build-type=*)
                    arg="$1"
                    shift
                    set -- "${arg%%=*}" "${arg#*=}" "$@"
                    continue
                    ;;
                --source-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessBazel: No argument after --source-path"
                        exit 1
                    fi

                    shift
                    SOURCE_PATH="$1"
                    ;;
                --build-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessBazel: No argument after --build-path"
                        exit 1
                    fi

                    shift
                    BUILD_PATH="$1"
                    ;;
                *)
                    echo "ProcessBazel: Unknown argument $1."
                    exit 1
                    ;;
            esac

            shift
        done

        for CURRENT_COMPILER in "${DEFAULT_SUPPORTED_COMPILERS[@]}"
        do
            for CURRENT_BUILD_TYPE in "${DEFAULT_SUPPORTED_BAZEL_BUILD_TYPES[@]}"
            do
                ProcessBazelTest                        \
                    --source-path ${SOURCE_PATH}        \
                    --build-path ${BUILD_PATH}          \
                    --compiler ${CURRENT_COMPILER}      \
                    --build-type ${CURRENT_BUILD_TYPE}
            done
        done
    fi
}

function ProcessCMakeGenerate {
    local SOURCE_PATH=""
    local BUILD_PATH=""
    local EXTRA_PARAMETERS=""
    local COMPILER=""
    local BUILD_TYPE=""

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --source-path=*|--build-path=*|--extra-parameters=*|--compiler=*|--build-type=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --source-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeGenerate: No argument after --source-path"
                    exit 1
                fi

                shift
                SOURCE_PATH="$1"
                ;;
            --build-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeGenerate: No argument after --build-path"
                    exit 1
                fi

                shift
                BUILD_PATH="$1"
                ;;
            --extra-parameters)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeGenerate: No argument after --extra-parameters"
                    exit 1
                fi

                shift
                EXTRA_PARAMETERS="$1"
                ;;
            --compiler)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeGenerate: No argument after --compiler"
                    exit 1
                fi

                shift
                COMPILER="$1"
                ;;
            --build-type)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeGenerate: No argument after --build-type"
                    exit 1
                fi

                shift
                BUILD_TYPE="$1"
                ;;
            *)
                echo "ProcessCMakeGenerate: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    local _CONTAINER_C_COMPILER=""
    local _CONTAINER_CPP_COMPILER=""
    local _CONTAINER_LINKER=""

    if [ "${COMPILER}" = "gnu" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_GNU_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_GNU_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_GNU_LINKER}

        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** GENERATE - GNU - DEBUG *********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** GENERATE - GNU - RELEASE WITH DEBUG ********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** GENERATE - GNU - RELEASE *******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** GENERATE - GNU - MINIMUM SIZE RELEASE ******************************************************************************"
        else
            echo "*** GENERATE - GNU - UNKNOWN *******************************************************************************************"
        fi
    elif [ "${COMPILER}" = "llvm" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_LLVM_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_LLVM_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_LLVM_LINKER}

        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** GENERATE - LLVM - DEBUG ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** GENERATE - LLVM - RELEASE WITH DEBUG *******************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** GENERATE - LLVM - RELEASE ******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** GENERATE - LLVM - MINIMUM SIZE RELEASE *****************************************************************************"
        else
            echo "*** GENERATE - LLVM - UNKNOWN ******************************************************************************************"
        fi
    elif [ "${COMPILER}" = "intel" ];
    then
        _CONTAINER_C_COMPILER=${TOOL_INTEL_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_INTEL_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_INTEL_LINKER}

        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** GENERATE - INTEL - DEBUG *******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** GENERATE - INTEL - RELEASE WITH DEBUG ******************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** GENERATE - INTEL - RELEASE *****************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** GENERATE - INTEL - MINIMUM SIZE RELEASE ****************************************************************************"
        else
            echo "*** GENERATE - INTEL - UNKNOWN *****************************************************************************************"
        fi
    else
        _CONTAINER_C_COMPILER=${TOOL_NONE_C_COMPILER}
        _CONTAINER_CPP_COMPILER=${TOOL_NONE_CPP_COMPILER}
        _CONTAINER_LINKER=${TOOL_NONE_LINKER}

        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** GENERATE - UNKNOWN - DEBUG *****************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** GENERATE - UNKNOWN - RELEASE WITH DEBUG ****************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** GENERATE - UNKNOWN - RELEASE ***************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** GENERATE - UNKNOWN - MINIMUM SIZE RELEASE **************************************************************************"
        else
            echo "*** GENERATE - UNKNOWN - UNKNOWN ***************************************************************************************"
        fi
    fi

    echo ""

    local _BUILD_PATH_FINAL="${BUILD_PATH}/${COMPILER}/${BUILD_TYPE}/build"
    local _INSTALL_PATH_FINAL="${BUILD_PATH}/${COMPILER}/${BUILD_TYPE}/install"

    mkdir -p ${_BUILD_PATH_FINAL}
    mkdir -p ${_INSTALL_PATH_FINAL}

    pushd ${_BUILD_PATH_FINAL} > /dev/null

    source /opt/intel/oneapi/setvars.sh > /dev/null

    CC=${_CONTAINER_C_COMPILER} CXX=${_CONTAINER_CPP_COMPILER} LD=${_CONTAINER_LINKER} cmake    \
        -G Ninja                                                                                \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE}                                                        \
        -DCMAKE_INSTALL_PREFIX=${_INSTALL_PATH_FINAL}                                           \
        ${EXTRA_PARAMETERS}                                                                     \
        ${SOURCE_PATH}

    popd > /dev/null

    echo ""
}

function ProcessCMakeBuild {
    local SOURCE_MOUNT=""
    local BUILD_PATH=""
    local COMPILER=""
    local BUILD_TYPE=""

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --source-path=*|--build-path=*|--compiler=*|--build-type=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --source-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeBuild: No argument after --source-path"
                    exit 1
                fi

                shift
                SOURCE_PATH="$1"
                ;;
            --build-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeBuild: No argument after --build-path"
                    exit 1
                fi

                shift
                BUILD_PATH="$1"
                ;;
            --compiler)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeBuild: No argument after --compiler"
                    exit 1
                fi

                shift
                COMPILER="$1"
                ;;
            --build-type)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeBuild: No argument after --build-type"
                    exit 1
                fi

                shift
                BUILD_TYPE="$1"
                ;;
            *)
                echo "ProcessCMakeBuild: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    if [ "${COMPILER}" = "gnu" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** BUILD - GNU - DEBUG ************************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** BUILD - GNU - RELEASE WITH DEBUG ***********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** BUILD - GNU - RELEASE **********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** BUILD - GNU - MINIMUM SIZE RELEASE *********************************************************************************"
        else
            echo "*** BUILD - GNU - UNKNOWN **********************************************************************************************"
        fi
    elif [ "${COMPILER}" = "llvm" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** BUILD - LLVM - DEBUG ***********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** BUILD - LLVM - RELEASE WITH DEBUG **********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** BUILD - LLVM - RELEASE *********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** BUILD - LLVM - MINIMUM SIZE RELEASE ********************************************************************************"
        else
            echo "*** BUILD - LLVM - UNKNOWN *********************************************************************************************"
        fi
    elif [ "${COMPILER}" = "intel" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** BUILD - INTEL - DEBUG **********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** BUILD - INTEL - RELEASE WITH DEBUG *********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** BUILD - INTEL - RELEASE ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** BUILD - INTEL - MINIMUM SIZE RELEASE *******************************************************************************"
        else
            echo "*** BUILD - INTEL - UNKNOWN ********************************************************************************************"
        fi
    else
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** BUILD - UNKNOWN - DEBUG ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** BUILD - UNKNOWN - RELEASE WITH DEBUG *******************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** BUILD - UNKNOWN - RELEASE ******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** BUILD - UNKNOWN - MINIMUM SIZE RELEASE *****************************************************************************"
        else
            echo "*** BUILD - UNKNOWN - UNKNOWN ******************************************************************************************"
        fi
    fi

    echo ""

    local _BUILD_PATH_FINAL="${BUILD_PATH}/${COMPILER}/${BUILD_TYPE}/build"

    pushd ${_BUILD_PATH_FINAL} > /dev/null

    source /opt/intel/oneapi/setvars.sh > /dev/null

    cmake           \
        --build .

    popd > /dev/null

    echo ""
}

function ProcessCMakeInstall {
    local SOURCE_MOUNT=""
    local BUILD_PATH=""
    local COMPILER=""
    local BUILD_TYPE=""

    while [[ $# -ne 0 ]];
    do
        case $1 in
            --source-path=*|--build-path=*|--compiler=*|--build-type=*)
                arg="$1"
                shift
                set -- "${arg%%=*}" "${arg#*=}" "$@"
                continue
                ;;
            --source-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeInstall: No argument after --source-path"
                    exit 1
                fi

                shift
                SOURCE_PATH="$1"
                ;;
            --build-path)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeInstall: No argument after --build-path"
                    exit 1
                fi

                shift
                BUILD_PATH="$1"
                ;;
            --compiler)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeInstall: No argument after --compiler"
                    exit 1
                fi

                shift
                COMPILER="$1"
                ;;
            --build-type)
                if [[ $# -lt 2 ]];
                then
                    echo "ProcessCMakeInstall: No argument after --build-type"
                    exit 1
                fi

                shift
                BUILD_TYPE="$1"
                ;;
            *)
                echo "ProcessCMakeInstall: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done

    if [ "${COMPILER}" = "gnu" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** INSTALL - GNU - DEBUG **********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** INSTALL - GNU - RELEASE WITH DEBUG *********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** INSTALL - GNU - RELEASE ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** INSTALL - GNU - MINIMUM SIZE RELEASE *******************************************************************************"
        else
            echo "*** INSTALL - GNU - UNKNOWN ********************************************************************************************"
        fi
    elif [ "${COMPILER}" = "llvm" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** INSTALL - LLVM - DEBUG *********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** INSTALL - LLVM - RELEASE WITH DEBUG ********************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** INSTALL - LLVM - RELEASE *******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** INSTALL - LLVM - MINIMUM SIZE RELEASE ******************************************************************************"
        else
            echo "*** INSTALL - LLVM - UNKNOWN *******************************************************************************************"
        fi
    elif [ "${COMPILER}" = "intel" ];
    then
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** INSTALL - INTEL - DEBUG ********************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** INSTALL - INTEL - RELEASE WITH DEBUG *******************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** INSTALL - INTEL - RELEASE ******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** INSTALL - INTEL - MINIMUM SIZE RELEASE *****************************************************************************"
        else
            echo "*** INSTALL - INTEL - UNKNOWN ******************************************************************************************"
        fi
    else
        if [ "${BUILD_TYPE}" = "debug" ];
        then
            echo "*** INSTALL - UNKNOWN - DEBUG ******************************************************************************************"
        elif [ "${BUILD_TYPE}" = "relwithdebinfo" ];
        then
            echo "*** INSTALL - UNKNOWN - RELEASE WITH DEBUG *****************************************************************************"
        elif [ "${BUILD_TYPE}" = "release" ];
        then
            echo "*** INSTALL - UNKNOWN - RELEASE ****************************************************************************************"
        elif [ "${BUILD_TYPE}" = "minsizerel" ];
        then
            echo "*** INSTALL - UNKNOWN - MINIMUM SIZE RELEASE ***************************************************************************"
        else
            echo "*** INSTALL - UNKNOWN - UNKNOWN ****************************************************************************************"
        fi
    fi

    echo ""

    local _BUILD_PATH_FINAL="${BUILD_PATH}/${COMPILER}/${BUILD_TYPE}/build"
    local _INSTALL_PATH_FINAL="${BUILD_PATH}/${COMPILER}/${BUILD_TYPE}/install"

    pushd ${_BUILD_PATH_FINAL} > /dev/null

    source /opt/intel/oneapi/setvars.sh > /dev/null

    cmake                                   \
        --install .                         \
        --prefix "${_INSTALL_PATH_FINAL}"

    popd > /dev/null

    echo ""
}

function ProcessCMake {
    local SOURCE_PATH=""
    local BUILD_PATH=""
    local EXTRA_BUILD_PARAMETERS=""

    if [[ ${PARAMETER_DISABLE_BUILD} -eq 0 ]];
    then
        while [[ $# -ne 0 ]];
        do
            case $1 in
                --source-path=*|--build-path=*|--extra-parameters=*)
                    arg="$1"
                    shift
                    set -- "${arg%%=*}" "${arg#*=}" "$@"
                    continue
                    ;;
                --source-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessCMake: No argument after --source-path"
                        exit 1
                    fi

                    shift
                    SOURCE_PATH="$1"
                    ;;
                --build-path)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessCMake: No argument after --build-path"
                        exit 1
                    fi

                    shift
                    BUILD_PATH="$1"
                    ;;
                --extra-parameters)
                    if [[ $# -lt 2 ]];
                    then
                        echo "ProcessCMake: No argument after --extra-parameters"
                        exit 1
                    fi

                    shift
                    EXTRA_PARAMETERS="$1"
                    ;;
                *)
                    echo "ProcessCMake: Unknown argument $1."
                    exit 1
                    ;;
            esac

            shift
        done

        for CURRENT_COMPILER in "${DEFAULT_SUPPORTED_COMPILERS[@]}"
        do
            for CURRENT_BUILD_TYPE in "${DEFAULT_SUPPORTED_CMAKE_BUILD_TYPES[@]}"
            do
                ProcessCMakeGenerate                        \
                    --source-path ${SOURCE_PATH}            \
                    --build-path ${BUILD_PATH}              \
                    --extra-parameters ${EXTRA_PARAMETERS}  \
                    --compiler ${CURRENT_COMPILER}          \
                    --build-type ${CURRENT_BUILD_TYPE}

                ProcessCMakeBuild                       \
                    --source-path ${SOURCE_PATH}        \
                    --build-path ${BUILD_PATH}          \
                    --compiler ${CURRENT_COMPILER}      \
                    --build-type ${CURRENT_BUILD_TYPE}

                ProcessCMakeInstall                     \
                    --source-path ${SOURCE_PATH}        \
                    --build-path ${BUILD_PATH}          \
                    --compiler ${CURRENT_COMPILER}      \
                    --build-type ${CURRENT_BUILD_TYPE}
            done
        done
    fi
}

function PrintBanner {
    echo ""
    echo "************************************************************************************************************************"
    echo "* $1"
    echo "************************************************************************************************************************"
    echo ""
}

function ProcessCommonArguments {
    while [[ $# -ne 0 ]];
    do
        case $1 in
            --disable-clear)
                PARAMETER_DISABLE_CLEAR=1
                ;;
            --disable-prune)
                PARAMETER_DISABLE_PRUNE=1
                ;;
            --disable-content)
                PARAMETER_DISABLE_CONTENT=1
                ;;
            --disable-services)
                PARAMETER_DISABLE_SERVICES=1
                ;;
            --disable-deluge)
                PARAMETER_DISABLE_DELUGE=1
                ;;
            --disable-plex)
                PARAMETER_DISABLE_PLEX=1
                ;;
            --disable-development)
                PARAMETER_DISABLE_DEVELOPMENT=1
                ;;
            --disable-repositories)
                PARAMETER_DISABLE_REPOSITORIES=1
                ;;
            --disable-clone)
                PARAMETER_DISABLE_CLONE=1
                ;;
            --disable-build)
                PARAMETER_DISABLE_BUILD=1
                ;;
            --disable-randoms)
                PARAMETER_DISABLE_RANDOMS=1
                ;;
            *)
                echo "Process: Unknown argument $1."
                exit 1
                ;;
        esac

        shift
    done
}

function ProcessCommonPre {
    if [[ ${PARAMETER_DISABLE_CLEAR} -eq 0 ]];
    then
        clear
    fi
}

function ProcessCommonPost {
    if [[ ${PARAMETER_DISABLE_PRUNE} -eq 0 ]];
    then
        docker \
            system \
                prune \
                    --force \
                    --volumes
    fi
}

function ProcessCallSubScripts {
    if [[ ${PARAMETER_DISABLE_REPOSITORIES} -eq 0 ]];
    then
        local REPOSITORIES_ARGUMENTS=()

        REPOSITORIES_ARGUMENTS+=("--disable-clear")
        REPOSITORIES_ARGUMENTS+=("--disable-prune")

        if [[ ${PARAMETER_DISABLE_CONTENT} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-content")
        fi

        if [[ ${PARAMETER_DISABLE_SERVICES} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-services")
        fi

        if [[ ${PARAMETER_DISABLE_DELUGE} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-deluge")
        fi

        if [[ ${PARAMETER_DISABLE_PLEX} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-plex")
        fi

        if [[ ${PARAMETER_DISABLE_DEVELOPMENT} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-development")
        fi

        if [[ ${PARAMETER_DISABLE_REPOSITORIES} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-repositories")
        fi

        if [[ ${PARAMETER_DISABLE_CLONE} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-clone")
        fi

        if [[ ${PARAMETER_DISABLE_BUILD} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-build")
        fi

        if [[ ${PARAMETER_DISABLE_RANDOMS} -eq 1 ]];
        then
            REPOSITORIES_ARGUMENTS+=("--disable-randoms")
        fi

        while [[ $# -ne 0 ]];
        do
            local REPOSITORY_SCRIPT_NAME=$1

            chmod +x "${REPOSITORY_SCRIPT_NAME}"

            "${REPOSITORY_SCRIPT_NAME}" ${REPOSITORIES_ARGUMENTS[@]}

            shift
        done
    fi
}
